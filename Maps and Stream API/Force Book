package ex1_MapsLambdaStreamAPI_13March2019;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class P09_ForceBook {
	public static void main(String[] args) {
		@SuppressWarnings("resource")

		Scanner sc = new Scanner(System.in);

		Map<String, List<String>> usersInSide = new HashMap<>();

		String input = "";

		while (!"Lumpawaroo".equals(input = sc.nextLine())) {
			String side = "";
			String user = "";

			if (input.contains("|")) {
				String[] data = input.split("\\s+\\|\\s+");
				side = data[0];
				user = data[1];

				usersInSide.putIfAbsent(side, new ArrayList<>());
				
				boolean exists = false;
				for (Map.Entry<String, List<String>> kvp : usersInSide.entrySet()) {
					if (kvp.getValue().contains(user)) {
						exists = true;
						break;
					}
				}

				if (!exists) {
					usersInSide.get(side).add(user);
				}
			} else if (input.contains("->")) {
				String data[] = input.split("\\s+\\->\\s+");
				user = data[0];
				side = data[1];

				Set<String> keys = usersInSide.keySet();

				boolean exists = false;
				String oldSide = "";

				for (String key : keys) {
					if (usersInSide.get(key).contains(user)) {
						exists = true;
						oldSide = key;
					}
				}

				if (exists) {
					usersInSide.get(oldSide).remove(user);
					usersInSide.putIfAbsent(side, new ArrayList<>());
					usersInSide.get(side).add(user);
					System.out.printf("%s joins the %s side!%n", user, side);

				} else {
					usersInSide.putIfAbsent(side, new ArrayList<>());
					usersInSide.get(side).add(user);
					System.out.printf("%s joins the %s side!%n", user, side);
				}

			}
		}

		usersInSide.entrySet().stream().sorted((m1, m2) -> {
			int diff = Integer.compare(m2.getValue().size(), m1.getValue().size());

			if (diff == 0) {
				diff = m1.getKey().compareTo(m2.getKey());
			}
			return diff;
		}).forEach(e -> {
			if (e.getValue().size() != 0) {
				System.out.printf("Side: %s, Members: %d%n", e.getKey(), e.getValue().size());
			}

			e.getValue().stream().sorted().forEach(n -> System.out.printf("! %s%n", n));

		});

	}
}
